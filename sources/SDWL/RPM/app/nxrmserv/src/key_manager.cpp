

#include <Windows.h>
#include <assert.h>

#include <ncrypt.h>

#include <string>
#include <vector>

#include <nudf\eh.hpp>
#include <nudf\debug.hpp>
#include <nudf\filesys.hpp>
#include <nudf\string.hpp>
#include <nudf\crypto_dh.hpp>
#include <nudf\crypto_cert.hpp>
#include <nudf\conversion.hpp>


#include <dh_gen.h>

#include "global.hpp"
#include "serv.hpp"
#include "key_manager.hpp"



static const UCHAR DH_P_2048[256] = {
    0xD3, 0x10, 0x12, 0x5B, 0x29, 0x4D, 0xBD, 0x85, 0x68, 0x14, 0xDF, 0xD4, 0xBA, 0xB4, 0xDC, 0x76,
    0x7D, 0xF6, 0xA9, 0x99, 0xC9, 0xED, 0xFA, 0x8F, 0x8D, 0x7B, 0x12, 0x55, 0x1F, 0x8D, 0x71, 0xEF,
    0x60, 0x32, 0x35, 0x74, 0x05, 0xC7, 0xF1, 0x1E, 0xE1, 0x47, 0xDB, 0x03, 0x32, 0x71, 0x6F, 0xC8,
    0xFD, 0x85, 0xED, 0x02, 0x75, 0x85, 0x26, 0x83, 0x60, 0xD1, 0x6B, 0xD7, 0x61, 0x56, 0x3D, 0x7D,
    0x16, 0x59, 0xD4, 0xD7, 0x3D, 0xAE, 0xD6, 0x17, 0xF3, 0xE4, 0x22, 0x3F, 0x48, 0xBC, 0xEF, 0xA4,
    0x21, 0x86, 0x0C, 0x3F, 0xC4, 0x39, 0x3D, 0x27, 0x54, 0x56, 0x77, 0xB2, 0x24, 0x59, 0xE8, 0x52,
    0xF5, 0x25, 0x4D, 0x3A, 0xC5, 0x8C, 0x0D, 0x63, 0xDD, 0x79, 0xDE, 0x2D, 0x8D, 0x86, 0x8C, 0xD9,
    0x40, 0xDE, 0xCF, 0x5A, 0x27, 0x46, 0x05, 0xDB, 0x0E, 0xEE, 0x76, 0x20, 0x20, 0xC3, 0x9D, 0x0F,
    0x64, 0x86, 0x60, 0x65, 0x80, 0xEA, 0xAC, 0xCE, 0x16, 0xFB, 0x70, 0xFB, 0x7C, 0x75, 0x9E, 0xA9,
    0xAA, 0xBA, 0xB4, 0xDC, 0xBF, 0x94, 0x18, 0x91, 0xB0, 0xCE, 0x94, 0xEC, 0x4D, 0x3D, 0x59, 0x54,
    0x21, 0x7C, 0x6E, 0x84, 0xA9, 0x27, 0x4F, 0x1A, 0xB8, 0x60, 0x73, 0xBD, 0xF9, 0xDC, 0x85, 0x1E,
    0x56, 0x3B, 0x90, 0x45, 0x5B, 0x83, 0x97, 0xDA, 0xE3, 0xA1, 0xB9, 0x98, 0x60, 0x7B, 0xB7, 0x69,
    0x9C, 0xEA, 0x08, 0x05, 0xA7, 0xFF, 0x01, 0x3E, 0xF4, 0x4F, 0xDE, 0x7A, 0xF8, 0x30, 0xF1, 0xFD,
    0x05, 0x1F, 0xFA, 0xEC, 0x53, 0x9C, 0xE4, 0x45, 0x2D, 0x82, 0x29, 0x09, 0x8A, 0xE3, 0xEE, 0x20,
    0x08, 0xAB, 0x9D, 0xB7, 0xB2, 0xC9, 0x48, 0x31, 0x2C, 0xBC, 0x01, 0x37, 0xC0, 0x82, 0xD6, 0x67,
    0x26, 0x18, 0xE1, 0xBF, 0xE5, 0xD5, 0x00, 0x6E, 0x81, 0x0D, 0xC7, 0xAA, 0x7F, 0x1E, 0x6E, 0xE3
};

static const UCHAR DH_G_2048[256] = {
    0x64, 0xAC, 0xEB, 0xA5, 0xF7, 0xBC, 0x80, 0x3E, 0xF2, 0x97, 0x31, 0xC9, 0xC6, 0xAE, 0x00, 0x9B,
    0x86, 0xFC, 0x52, 0x01, 0xF8, 0x1B, 0xC2, 0xB8, 0xF8, 0x48, 0x90, 0xFC, 0xF7, 0x1C, 0xAD, 0x51,
    0xC1, 0x42, 0x9F, 0xD2, 0x61, 0xA2, 0xA7, 0x15, 0xC8, 0x94, 0x61, 0x54, 0xE0, 0xE4, 0xE2, 0x8E,
    0xF6, 0xB2, 0xD4, 0x93, 0xCC, 0x17, 0x39, 0xF5, 0x65, 0x9E, 0x9F, 0x14, 0xDD, 0x14, 0x03, 0x7F,
    0x5F, 0xE7, 0x2B, 0x3B, 0xA4, 0xD9, 0xBC, 0xB3, 0xB9, 0x5B, 0x84, 0x17, 0xBD, 0xA4, 0x8F, 0x11,
    0x8E, 0x61, 0xC8, 0x21, 0x4C, 0xF8, 0xD5, 0x58, 0xDA, 0x67, 0x74, 0xF0, 0x8B, 0x58, 0xD9, 0x7B,
    0x2C, 0xCE, 0x20, 0xF5, 0xAA, 0x2F, 0x8E, 0x95, 0x39, 0xC0, 0x14, 0xE7, 0x76, 0x1E, 0x4E, 0x63,
    0x36, 0xCF, 0xFC, 0x35, 0x12, 0x7D, 0xDD, 0x52, 0x72, 0x06, 0x76, 0x6A, 0xE7, 0x20, 0x45, 0xC1,
    0x1B, 0x0F, 0xF4, 0xDA, 0x76, 0x17, 0x25, 0x23, 0x71, 0x3B, 0x31, 0xC9, 0xF1, 0x8A, 0xBA, 0xBA,
    0x92, 0x61, 0x2B, 0xDE, 0x10, 0x51, 0x41, 0xF0, 0x4D, 0xB5, 0xDA, 0x3C, 0x39, 0xCD, 0xE5, 0xC6,
    0x87, 0x7B, 0x7F, 0x8C, 0xD9, 0x69, 0x49, 0xFC, 0xC8, 0x76, 0xE2, 0xC1, 0x22, 0x4F, 0xB9, 0x18,
    0x8D, 0x71, 0x4F, 0xDD, 0x6C, 0xB8, 0x06, 0x82, 0xF8, 0x96, 0x78, 0x33, 0xAD, 0x4B, 0x51, 0x35,
    0x4A, 0x8D, 0x58, 0x59, 0x8E, 0x6B, 0x2D, 0xEF, 0x45, 0x71, 0xA5, 0x97, 0xAD, 0x39, 0xBD, 0x31,
    0x77, 0xD5, 0x4B, 0x24, 0xCA, 0x51, 0x8E, 0xDA, 0x99, 0x6E, 0xED, 0xBA, 0x8A, 0x31, 0xD5, 0x87,
    0x6E, 0xFE, 0xD8, 0xAA, 0x44, 0x02, 0x3C, 0xC9, 0xF1, 0x3D, 0x86, 0xDC, 0xB4, 0xDD, 0xFC, 0xF3,
    0x89, 0xC7, 0xA1, 0x43, 0x50, 0x82, 0xEF, 0x69, 0x70, 0x36, 0x03, 0x63, 0x83, 0x25, 0x95, 0x4E
};

static const UCHAR DH_P_1024[128] = {
    0xE8, 0xEA, 0xFD, 0xE6, 0xF9, 0xE0, 0x15, 0x44, 0xA9, 0x7A, 0x8C, 0x41, 0x26, 0x2C, 0x64, 0xE6,
    0x87, 0x90, 0x8E, 0x78, 0xF7, 0xF5, 0xA5, 0x89, 0xDC, 0x95, 0xB5, 0x6A, 0x01, 0x5C, 0xC3, 0x42,
    0xFA, 0x86, 0x95, 0xF7, 0x5F, 0x00, 0x5D, 0x86, 0xE8, 0x6B, 0xB2, 0x5E, 0x82, 0x23, 0x81, 0xD1,
    0x1B, 0xE3, 0xFF, 0x43, 0xDD, 0xE0, 0x27, 0x47, 0x00, 0x23, 0x42, 0x32, 0x65, 0x8B, 0x5E, 0xD5,
    0xD5, 0xFF, 0xE1, 0xA6, 0xEB, 0xAE, 0xB5, 0x26, 0x7E, 0x04, 0xC3, 0x67, 0x09, 0x65, 0xDF, 0xD9,
    0xE1, 0x69, 0xCE, 0x18, 0xD9, 0xC2, 0xF5, 0xEE, 0x9C, 0x0F, 0x2B, 0xD6, 0xF4, 0xD3, 0x9D, 0xC6,
    0xFE, 0x86, 0x56, 0x09, 0x57, 0x68, 0xAC, 0xEB, 0x05, 0x23, 0x6D, 0x86, 0xC7, 0x7C, 0xD9, 0xC2,
    0x3D, 0x8B, 0x29, 0x1C, 0x38, 0xA7, 0x81, 0x6A, 0x9E, 0xD8, 0x19, 0x7A, 0x82, 0x57, 0xE4, 0x47
};


static const UCHAR DH_G_1024[128] = {
    0xC5, 0xBA, 0x27, 0xAA, 0x74, 0xCB, 0xD8, 0x89, 0xCB, 0x8D, 0xB1, 0x9D, 0x7D, 0xC5, 0x69, 0xC5,
    0xF1, 0x55, 0xEA, 0x66, 0x75, 0xE2, 0xF1, 0x2A, 0x15, 0x4B, 0xFF, 0xA8, 0x0E, 0x1F, 0xAA, 0xD8,
    0x42, 0x14, 0x76, 0x2A, 0xA2, 0x10, 0xFD, 0x2D, 0xE5, 0x9D, 0x4D, 0x89, 0x08, 0x9B, 0x2E, 0x57,
    0x29, 0xD3, 0x2C, 0xC2, 0x5A, 0x24, 0xE0, 0x7C, 0x4A, 0x9F, 0xA8, 0x76, 0x45, 0xAE, 0x87, 0x0D,
    0x92, 0xB1, 0x3E, 0x7F, 0x31, 0xE8, 0x26, 0x55, 0x75, 0xB9, 0x80, 0x7A, 0xC1, 0x9B, 0x6F, 0xCC,
    0x92, 0x17, 0x24, 0xAE, 0xC2, 0xFB, 0x8A, 0x87, 0x6E, 0x72, 0x83, 0x5B, 0x3B, 0x23, 0xB5, 0x62,
    0x4C, 0xE1, 0xCA, 0xE7, 0x39, 0x03, 0xCA, 0xCF, 0x95, 0x48, 0x62, 0x3E, 0x5F, 0x5F, 0xF2, 0x7A,
    0x2A, 0xF5, 0xB1, 0x5D, 0xCE, 0x56, 0xB3, 0x08, 0xD8, 0xE0, 0xDC, 0x3C, 0x19, 0xC2, 0x02, 0x07
};




class ncrypt_provider
{
public:
    ncrypt_provider() : _hprov(NULL)
    {
        if (ERROR_SUCCESS != NCryptOpenStorageProvider(&_hprov, MS_KEY_STORAGE_PROVIDER, 0)) {
            _hprov = NULL;
        }
    }

    ~ncrypt_provider()
    {
        clear();
    }

    inline bool empty() const { return (NULL == _hprov); }
    inline NCRYPT_PROV_HANDLE get() const { return _hprov; }
    inline void clear() {
        if (NULL != _hprov) {
            NCryptFreeObject(_hprov);
            _hprov = NULL;
        }
    }

private:
    NCRYPT_PROV_HANDLE  _hprov;
};

NCRYPT_PROV_HANDLE GetNProvider()
{
    static ncrypt_provider provider;
    return provider.get();
}



//
//
//

#define MASTER_KEY_NAME L"nextlabs.master.key"

nxmaster_key::nxmaster_key() : _h(NULL)
{
}

nxmaster_key::nxmaster_key(const nxmaster_key& other) : _h(NULL)
{
}

nxmaster_key::nxmaster_key(nxmaster_key&& other) : _h(NULL)
{
    other._Move(*this);
}

nxmaster_key::~nxmaster_key()
{
    clear();
}

bool nxmaster_key::create()
{
    SECURITY_STATUS status = NCryptCreatePersistedKey(GetNProvider(), &_h, BCRYPT_RSA_ALGORITHM, MASTER_KEY_NAME, AT_KEYEXCHANGE, NCRYPT_MACHINE_KEY_FLAG);
    if (ERROR_SUCCESS != status) {
        SetLastError(status);
        return false;
    }

    const DWORD key_length = 2048;
    status = NCryptSetProperty(_h, NCRYPT_LENGTH_PROPERTY, (PBYTE)&key_length, (ULONG)sizeof(DWORD), NCRYPT_PERSIST_FLAG);
    if (ERROR_SUCCESS != status) {
        NCryptFreeObject(_h);
        _h = NULL;
        SetLastError(status);
        return false;
    }

    const DWORD key_usage = NCRYPT_ALLOW_ALL_USAGES;
    status = NCryptSetProperty(_h, NCRYPT_KEY_USAGE_PROPERTY, (PBYTE)&key_usage, (ULONG)sizeof(DWORD), NCRYPT_PERSIST_FLAG);
    if (ERROR_SUCCESS != status) {
        NCryptFreeObject(_h);
        _h = NULL;
        SetLastError(status);
        return false;
    }

    status = NCryptFinalizeKey(_h, 0);
    if (ERROR_SUCCESS != status) {
        NCryptFreeObject(_h);
        _h = NULL;
        SetLastError(status);
        return false;
    }

    return true;
}

bool nxmaster_key::open()
{
    SECURITY_STATUS status = NCryptOpenKey(GetNProvider(), &_h, MASTER_KEY_NAME, AT_KEYEXCHANGE, NCRYPT_MACHINE_KEY_FLAG | NCRYPT_SILENT_FLAG);
    if (FAILED(status)) {
        SetLastError(status);
        return false;
    }

    return true;
}

void  nxmaster_key::clear()
{
    if (NULL != _h) {
        NCryptFreeObject(_h);
        _h = NULL;
    }
}

bool nxmaster_key::remove()
{
    NCRYPT_KEY_HANDLE h = NULL;

    SECURITY_STATUS status = NCryptOpenKey(GetNProvider(), &h, MASTER_KEY_NAME, AT_KEYEXCHANGE, NCRYPT_MACHINE_KEY_FLAG | NCRYPT_SILENT_FLAG);
    if (FAILED(status)) {
        if (NTE_BAD_KEYSET == status) {
            return true;
        }

        SetLastError(status);
        return false;
    }

    status = NCryptDeleteKey(h, NCRYPT_SILENT_FLAG);
    NCryptFreeObject(h);
    h = NULL;

    if (FAILED(status)) {
        SetLastError(status);
        return false;
    }

    return true;
}

bool nxmaster_key::generate_cert(const std::wstring& file, std::vector<unsigned char>& thumb_print)
{
    CERT_NAME_BLOB nameblob = { 0, NULL };
    std::vector<unsigned char> namebuf;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    SYSTEMTIME st = { 0 };

    std::wstring strSubject = L"C=US;ST=California;O=NextLabs;OU=Rights Management;CN=";
    const NX::win::host h;
    strSubject += h.fqdn_name().empty() ? h.dns_host_name() : h.fqdn_name();

    if (!CertStrToNameW(X509_ASN_ENCODING, strSubject.c_str(), CERT_X500_NAME_STR | CERT_NAME_STR_SEMICOLON_FLAG, NULL, NULL, &nameblob.cbData, NULL)) {
        LOGERROR(NX::string_formater(L"Generate master key cert: fail to query subject name blob size (%d)", GetLastError()));
        return false;
    }
    if (0 == nameblob.cbData) {
        LOGERROR(L"Generate master key cert: required subject name blob size is zero");
        return false;
    }

    namebuf.resize(nameblob.cbData, 0);
    nameblob.pbData = namebuf.data();
    if (!CertStrToNameW(X509_ASN_ENCODING, strSubject.c_str(), CERT_X500_NAME_STR | CERT_NAME_STR_SEMICOLON_FLAG, NULL, nameblob.pbData, &nameblob.cbData, NULL)) {
        LOGERROR(NX::string_formater(L"Generate master key cert: fail to create subject name blob (%d)", GetLastError()));
        return false;
    }

    // Prepare algorithm structure
    memset(&SignatureAlgorithm, 0, sizeof(SignatureAlgorithm));
    // Since Microsoft stop supporting SHA1 since 2016, we only support SHA256 now
    SignatureAlgorithm.pszObjId = szOID_RSA_SHA256RSA;

    GetSystemTime(&st);
    st.wYear += 99;
    NX::cert::cert_context context(CertCreateSelfSignCertificate(_h, &nameblob, 0, NULL, &SignatureAlgorithm, NULL, &st, NULL));
    if (context.empty()) {
        LOGERROR(NX::string_formater(L"Generate master key cert: fail to create self-signed certificate (%d)", GetLastError()));
        return false;
    }

    if (!context.export_to_file(file, true)) {
        LOGERROR(NX::string_formater(L"Generate master key cert: fail to export certificate to file (%d)", GetLastError()));
        return false;
    }

    const NX::cert::cert_info& info = context.get_cert_info();
    thumb_print = info.get_thumbprint();
    const std::wstring& thumb_print_str = NX::conversion::to_wstring(thumb_print);
    LOGDETAIL(L"Master key certificate has been exported:");
    LOGDETAIL(NX::string_formater(L"    -> File: %s", file.c_str()));
    LOGDETAIL(NX::string_formater(L"    -> Thumbprint: %s", thumb_print_str.c_str()));
    return true;
}

nxmaster_key& nxmaster_key::operator = (const nxmaster_key& other)
{
    assert(false);
    return *this;
}

nxmaster_key& nxmaster_key::operator = (nxmaster_key&& other)
{
    if (this != &other) {
        other._Move(*this);
    }
    return *this;
}

void nxmaster_key::_Move(nxmaster_key& target)
{
    target._h = _h;
    _h = NULL;
}

NX::crypto::diffie_hellman_key_blob generate_dh_keyblob()
{
    NX::crypto::diffie_hellman_key dhkey;
    if (!dhkey.generate(DH_P_2048, DH_G_2048, 2048)) {
        return NX::crypto::diffie_hellman_key_blob();
    }
    return dhkey.export_key();
}


encrypt_token::encrypt_token() : _level(0)
{
}

//encrypt_token::encrypt_token(unsigned long level, const std::vector<unsigned char>& id, const std::vector<unsigned char>& value) : _level(level), _id(id), _value(value)
//{
//}

encrypt_token::encrypt_token(unsigned long level, const std::vector<unsigned char>& id, const std::vector<unsigned char>& otp, const std::vector<unsigned char>& value) : _level(level), _id(id), _otp(otp), _value(value)
{
}

encrypt_token::encrypt_token(const encrypt_token& other) : _level(other._level), _id(other._id), _otp(other._otp), _value(other._value)
{
}

encrypt_token::encrypt_token(encrypt_token&& other) : _level(std::move(other._level)), _id(std::move(other._id)), _otp(std::move(other._otp)), _value(std::move(other._value))
{
}

encrypt_token::~encrypt_token()
{
}

void encrypt_token::clear()
{
    _level = 0;
    _id.clear();
	_otp.clear();
    _value.clear();
}

encrypt_token& encrypt_token::operator = (const encrypt_token& other)
{
    if (this != &other) {
        _level = other._level;
        _id = other._id;
		_otp = other._otp;
		_value = other._value;
    }
    return *this;
}

encrypt_token& encrypt_token::operator = (encrypt_token&& other)
{
    if (this != &other) {
        _level = other._level;
        _id = std::move(other._id);
		_otp = std::move(other._otp);
		_value = std::move(other._value);
    }
    return *this;
}