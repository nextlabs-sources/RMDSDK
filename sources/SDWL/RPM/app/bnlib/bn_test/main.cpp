

#include <Windows.h>
#include <assert.h>


#include <nudf/crypto.hpp>
#include <nudf/crypto_dh.hpp>
#include <openssl/bn.h>



static const UCHAR DH_P_2048[256] = {
    0xD3, 0x10, 0x12, 0x5B, 0x29, 0x4D, 0xBD, 0x85, 0x68, 0x14, 0xDF, 0xD4, 0xBA, 0xB4, 0xDC, 0x76,
    0x7D, 0xF6, 0xA9, 0x99, 0xC9, 0xED, 0xFA, 0x8F, 0x8D, 0x7B, 0x12, 0x55, 0x1F, 0x8D, 0x71, 0xEF,
    0x60, 0x32, 0x35, 0x74, 0x05, 0xC7, 0xF1, 0x1E, 0xE1, 0x47, 0xDB, 0x03, 0x32, 0x71, 0x6F, 0xC8,
    0xFD, 0x85, 0xED, 0x02, 0x75, 0x85, 0x26, 0x83, 0x60, 0xD1, 0x6B, 0xD7, 0x61, 0x56, 0x3D, 0x7D,
    0x16, 0x59, 0xD4, 0xD7, 0x3D, 0xAE, 0xD6, 0x17, 0xF3, 0xE4, 0x22, 0x3F, 0x48, 0xBC, 0xEF, 0xA4,
    0x21, 0x86, 0x0C, 0x3F, 0xC4, 0x39, 0x3D, 0x27, 0x54, 0x56, 0x77, 0xB2, 0x24, 0x59, 0xE8, 0x52,
    0xF5, 0x25, 0x4D, 0x3A, 0xC5, 0x8C, 0x0D, 0x63, 0xDD, 0x79, 0xDE, 0x2D, 0x8D, 0x86, 0x8C, 0xD9,
    0x40, 0xDE, 0xCF, 0x5A, 0x27, 0x46, 0x05, 0xDB, 0x0E, 0xEE, 0x76, 0x20, 0x20, 0xC3, 0x9D, 0x0F,
    0x64, 0x86, 0x60, 0x65, 0x80, 0xEA, 0xAC, 0xCE, 0x16, 0xFB, 0x70, 0xFB, 0x7C, 0x75, 0x9E, 0xA9,
    0xAA, 0xBA, 0xB4, 0xDC, 0xBF, 0x94, 0x18, 0x91, 0xB0, 0xCE, 0x94, 0xEC, 0x4D, 0x3D, 0x59, 0x54,
    0x21, 0x7C, 0x6E, 0x84, 0xA9, 0x27, 0x4F, 0x1A, 0xB8, 0x60, 0x73, 0xBD, 0xF9, 0xDC, 0x85, 0x1E,
    0x56, 0x3B, 0x90, 0x45, 0x5B, 0x83, 0x97, 0xDA, 0xE3, 0xA1, 0xB9, 0x98, 0x60, 0x7B, 0xB7, 0x69,
    0x9C, 0xEA, 0x08, 0x05, 0xA7, 0xFF, 0x01, 0x3E, 0xF4, 0x4F, 0xDE, 0x7A, 0xF8, 0x30, 0xF1, 0xFD,
    0x05, 0x1F, 0xFA, 0xEC, 0x53, 0x9C, 0xE4, 0x45, 0x2D, 0x82, 0x29, 0x09, 0x8A, 0xE3, 0xEE, 0x20,
    0x08, 0xAB, 0x9D, 0xB7, 0xB2, 0xC9, 0x48, 0x31, 0x2C, 0xBC, 0x01, 0x37, 0xC0, 0x82, 0xD6, 0x67,
    0x26, 0x18, 0xE1, 0xBF, 0xE5, 0xD5, 0x00, 0x6E, 0x81, 0x0D, 0xC7, 0xAA, 0x7F, 0x1E, 0x6E, 0xE3
};

static const UCHAR DH_G_2048[256] = {
    0x64, 0xAC, 0xEB, 0xA5, 0xF7, 0xBC, 0x80, 0x3E, 0xF2, 0x97, 0x31, 0xC9, 0xC6, 0xAE, 0x00, 0x9B,
    0x86, 0xFC, 0x52, 0x01, 0xF8, 0x1B, 0xC2, 0xB8, 0xF8, 0x48, 0x90, 0xFC, 0xF7, 0x1C, 0xAD, 0x51,
    0xC1, 0x42, 0x9F, 0xD2, 0x61, 0xA2, 0xA7, 0x15, 0xC8, 0x94, 0x61, 0x54, 0xE0, 0xE4, 0xE2, 0x8E,
    0xF6, 0xB2, 0xD4, 0x93, 0xCC, 0x17, 0x39, 0xF5, 0x65, 0x9E, 0x9F, 0x14, 0xDD, 0x14, 0x03, 0x7F,
    0x5F, 0xE7, 0x2B, 0x3B, 0xA4, 0xD9, 0xBC, 0xB3, 0xB9, 0x5B, 0x84, 0x17, 0xBD, 0xA4, 0x8F, 0x11,
    0x8E, 0x61, 0xC8, 0x21, 0x4C, 0xF8, 0xD5, 0x58, 0xDA, 0x67, 0x74, 0xF0, 0x8B, 0x58, 0xD9, 0x7B,
    0x2C, 0xCE, 0x20, 0xF5, 0xAA, 0x2F, 0x8E, 0x95, 0x39, 0xC0, 0x14, 0xE7, 0x76, 0x1E, 0x4E, 0x63,
    0x36, 0xCF, 0xFC, 0x35, 0x12, 0x7D, 0xDD, 0x52, 0x72, 0x06, 0x76, 0x6A, 0xE7, 0x20, 0x45, 0xC1,
    0x1B, 0x0F, 0xF4, 0xDA, 0x76, 0x17, 0x25, 0x23, 0x71, 0x3B, 0x31, 0xC9, 0xF1, 0x8A, 0xBA, 0xBA,
    0x92, 0x61, 0x2B, 0xDE, 0x10, 0x51, 0x41, 0xF0, 0x4D, 0xB5, 0xDA, 0x3C, 0x39, 0xCD, 0xE5, 0xC6,
    0x87, 0x7B, 0x7F, 0x8C, 0xD9, 0x69, 0x49, 0xFC, 0xC8, 0x76, 0xE2, 0xC1, 0x22, 0x4F, 0xB9, 0x18,
    0x8D, 0x71, 0x4F, 0xDD, 0x6C, 0xB8, 0x06, 0x82, 0xF8, 0x96, 0x78, 0x33, 0xAD, 0x4B, 0x51, 0x35,
    0x4A, 0x8D, 0x58, 0x59, 0x8E, 0x6B, 0x2D, 0xEF, 0x45, 0x71, 0xA5, 0x97, 0xAD, 0x39, 0xBD, 0x31,
    0x77, 0xD5, 0x4B, 0x24, 0xCA, 0x51, 0x8E, 0xDA, 0x99, 0x6E, 0xED, 0xBA, 0x8A, 0x31, 0xD5, 0x87,
    0x6E, 0xFE, 0xD8, 0xAA, 0x44, 0x02, 0x3C, 0xC9, 0xF1, 0x3D, 0x86, 0xDC, 0xB4, 0xDD, 0xFC, 0xF3,
    0x89, 0xC7, 0xA1, 0x43, 0x50, 0x82, 0xEF, 0x69, 0x70, 0x36, 0x03, 0x63, 0x83, 0x25, 0x95, 0x4E
};

std::vector<unsigned char> calc_dh_y(const std::vector<unsigned char>& p, const std::vector<unsigned char>& g, const std::vector<unsigned char>& x);

int main(int argc, char** argv)
{
    NX::crypto::diffie_hellman_key dhkey;

    if (!dhkey.generate(DH_P_2048, DH_G_2048, 2048)) {
        printf("fail to create diffie-hellman key");
        return -1;
    }

    const NX::crypto::diffie_hellman_key_blob& keyblob = dhkey.export_key();
    if (keyblob.empty()) {
        printf("fail to export diffie-hellman key blob");
        return -1;
    }

    dhkey.clear();

    const std::vector<unsigned char>& key_p = keyblob.get_p();
    const std::vector<unsigned char>& key_g = keyblob.get_g();
    const std::vector<unsigned char>& key_x = keyblob.get_x();
    const std::vector<unsigned char>& key_y = keyblob.get_y();

    const std::vector<unsigned char>& new_y = calc_dh_y(key_p, key_g, key_x);

    if (key_y == new_y) {
        printf("succeeded");
    }
    else {
        printf("failed");
    }

    return 0;
}

std::vector<unsigned char> calc_dh_y(const std::vector<unsigned char>& p, const std::vector<unsigned char>& g, const std::vector<unsigned char>& x)
{
    std::vector<unsigned char> y;

    bool result = false;
    BN_CTX* ctx  = NULL;
    BIGNUM* bn_p = NULL;
    BIGNUM* bn_g = NULL;
    BIGNUM* bn_x = NULL;
    BIGNUM* bn_y = NULL;

    do {

        ctx = BN_CTX_new();
        if (NULL == ctx) {
            break;
        }

        BN_CTX_start(ctx);

        bn_p = BN_bin2bn(p.data(), (int)p.size(), NULL);
        if (NULL == bn_p) {
            break;
        }

        bn_g = BN_bin2bn(g.data(), (int)g.size(), NULL);
        if (NULL == bn_g) {
            break;
        }

        bn_x = BN_bin2bn(x.data(), (int)x.size(), NULL);
        if (NULL == bn_x) {
            break;
        }

        bn_y = BN_new();
        if (NULL == bn_y) {
            break;
        }

        if (BN_mod_exp(bn_y, bn_g, bn_x, bn_p, ctx)) {
            y.resize(x.size(), 0);
            const size_t y_size = BN_bn2bin(bn_y, y.data());
            assert(y_size == x.size());
        }

    } while (false);

    if (bn_p) {
        BN_free(bn_p);
    }

    if (bn_g) {
        BN_free(bn_g);
    }

    if (bn_x) {
        BN_free(bn_x);
    }

    if (bn_y) {
        BN_free(bn_y);
    }

    if (NULL != ctx) {
        BN_CTX_end(ctx);
        BN_CTX_free(ctx);
        ctx = NULL;
    }

    return std::move(y);
}